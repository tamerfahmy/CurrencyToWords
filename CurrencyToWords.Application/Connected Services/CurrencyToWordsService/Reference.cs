//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrencyToWords.ClientApplication.CurrencyToWordsService {
    using System;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateTimeFormatFlags", Namespace="http://schemas.datacontract.org/2004/07/System.Globalization")]
    public enum DateTimeFormatFlags : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseGenitiveMonth = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseLeapYearMonth = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseSpacesInMonthNames = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseHebrewRule = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseSpacesInDayNames = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UseDigitPrefixInTokens = 32,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotInitialized = -1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConversionResponse", Namespace="http://schemas.datacontract.org/2004/07/CurrencyToWords.Service")]
    [System.SerializableAttribute()]
    public partial class ConversionResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AmountInWordsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private CurrencyToWords.ClientApplication.CurrencyToWordsService.ServiceResultStatus StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AmountInWords {
            get {
                return this.AmountInWordsField;
            }
            set {
                if ((object.ReferenceEquals(this.AmountInWordsField, value) != true)) {
                    this.AmountInWordsField = value;
                    this.RaisePropertyChanged("AmountInWords");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public CurrencyToWords.ClientApplication.CurrencyToWordsService.ServiceResultStatus Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceResultStatus", Namespace="http://schemas.datacontract.org/2004/07/CurrencyToWords.Service")]
    public enum ServiceResultStatus : byte {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failed = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CurrencyToWordsService.ICurrencyToWordsService")]
    public interface ICurrencyToWordsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyToWordsService/Convert", ReplyAction="http://tempuri.org/ICurrencyToWordsService/ConvertResponse")]
        CurrencyToWords.ClientApplication.CurrencyToWordsService.ConversionResponse Convert(double value, System.Globalization.CultureInfo cultureInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICurrencyToWordsService/Convert", ReplyAction="http://tempuri.org/ICurrencyToWordsService/ConvertResponse")]
        System.Threading.Tasks.Task<CurrencyToWords.ClientApplication.CurrencyToWordsService.ConversionResponse> ConvertAsync(double value, System.Globalization.CultureInfo cultureInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICurrencyToWordsServiceChannel : CurrencyToWords.ClientApplication.CurrencyToWordsService.ICurrencyToWordsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CurrencyToWordsServiceClient : System.ServiceModel.ClientBase<CurrencyToWords.ClientApplication.CurrencyToWordsService.ICurrencyToWordsService>, CurrencyToWords.ClientApplication.CurrencyToWordsService.ICurrencyToWordsService {
        
        public CurrencyToWordsServiceClient() {
        }
        
        public CurrencyToWordsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CurrencyToWordsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyToWordsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CurrencyToWordsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public CurrencyToWords.ClientApplication.CurrencyToWordsService.ConversionResponse Convert(double value, System.Globalization.CultureInfo cultureInfo) {
            return base.Channel.Convert(value, cultureInfo);
        }
        
        public System.Threading.Tasks.Task<CurrencyToWords.ClientApplication.CurrencyToWordsService.ConversionResponse> ConvertAsync(double value, System.Globalization.CultureInfo cultureInfo) {
            return base.Channel.ConvertAsync(value, cultureInfo);
        }
    }
}
